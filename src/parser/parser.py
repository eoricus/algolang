class Parser:
    def init(self, tokens):
        self.tokens = tokens
        self.current_token_index = 0

    def parse(self):
        """
        Вызывает другие методы для разбора различных конструкций 
        языка и создания узлов AST. Возвращает корневой узел AST.
        """
        pass

    def _eat(self, token_type):
        """
        Проверяет, что текущий токен имеет заданный тип, и двигает 
        указатель на следующий токен. В случае несоответствия типа вызывается ошибка.

        TODO: напиши метод _eat, объясни его, а также обработку аргументов и возвращаемых значений модуля (в _module)
        """
        pass

    def _module(self):
        """
        Обрабатывает объявление и тело модуля (функции).
        """
        pass

    def _statement(self):
        """
        Обрабатывает различные операторы (например, условные и циклические операторы) и вызывает 
        соответствующие методы для их разбора.
        """
        pass

    def _condition(self):
        """
        Обрабатывает условные операторы (ЕСЛИ ... ТО, ИНАЧЕ, ВЫБОР).
        """
        pass

    def _loop(self):
        """
        Обрабатывает циклические операторы (ДЛЯ, ПО, ШАГ, ПОКА).
        """
        pass

    def _assignment(self):
        """
        Обрабатывает операторы присваивания.
        """
        pass

    def _expression(self):
        """
        Обрабатывает арифметические и логические выражения.
        """
        pass

    def _term(self):
        """
        Обрабатывает термы арифметических выражений.
        """
        pass

    def _factor(self):
        """
        Обрабатывает факторы арифметических выражений 
        (числа, переменные, скобки) и создает соответствующие узлы.
        """
        pass

    def _datatype(self):
        """
        Обрабатывает определение типа данных.
        """
        pass

    def _array(self):
        """
        Обрабатывает определение массива.
        """
        pass

    def _function_call(self):
        """
        Обрабатывает вызов функции.
        """
        pass

    def _return_statement(self):
        """
        Обрабатывает оператор ВОЗВРАТ.
        """
        pass

    def _exit_statement(self):
        """
        Обрабатывает оператор ВЫХОД.
        """
        pass

    def _parse_error(self, error_message):
        """
        Выводит сообщение об ошибке.
        """
        pass

    def _next_token(self):
        """
        Возвращает следующий токен из списка токенов и двигает указатель на него.
        """
        pass

    def _peek_token(self):
        """
        Возвращает следующий токен без перемещения указателя на текущий токен.
        """
        pass
